package com.app.loan.entities;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import com.app.entity.payment.TransactionHistory;
import com.app.loan.idGenerator.StringPrefixedSequenceIdGenerator;
import com.fasterxml.jackson.annotation.JsonBackReference;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


/**
 * Represents a payment made towards a loan.
 * Each payment is associated with a specific loan and contains details 
 * about the payment amount, EMI amount, and transaction status.
 */
@Entity
@Table(name ="loan_payment")
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString(callSuper = true)
public class LoanPayment{
	
	
	/**
     * Unique identifier for the loan payment.
     * This is automatically generated by the database.
     */
	/**
     * Unique identifier for the account, generated using a custom sequence.
     */
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "loanPay_seq")
    @GenericGenerator(
        name = "loanPay_seq", 
        strategy = "com.app.loan.idGenerator.StringPrefixedSequenceIdGenerator", 
        parameters = {
            @Parameter(name = StringPrefixedSequenceIdGenerator.INCREMENT_PARAM, value = "1"),
            @Parameter(name = StringPrefixedSequenceIdGenerator.VALUE_PREFIX_PARAMETER, value = "LP_"),
            @Parameter(name = StringPrefixedSequenceIdGenerator.NUMBER_FORMAT_PARAMETER, value = "%02d") })
	@Column(name = "loan_pay_id")
	private String payment_id;
	
	
	/**
     * The loan associated with this payment.
     * Each payment is linked to a specific loan.
     */
	@ManyToOne(fetch = FetchType.EAGER)
	@JsonBackReference
    @JoinColumn(name = "loan",nullable=false)
	private Loan loan;
	
//	@ManyToOne(fetch = FetchType.EAGER)
//	@JsonBackReference
//	@JoinColumn(name="account_number", nullable = false)
//	private Account account;
	
	/**
     * The total amount payable in this payment.
     */
	@Column(name = "payable_amount")
	private float payableAmount;
	
	
	/**
     * The amount corresponding to the EMI (Equated Monthly Installment) in this payment.
     */
	@Column(name="loan_amount")
	private float loanAmount;
	
	
	/**
     * The status of the transaction for this payment.
     * This could include statuses like DEBITED, CREDITED.
     */
	@Column(name="transaction_status")
	private TransactionStatus status = TransactionStatus.DEBIT;
	
	@OneToMany(mappedBy = "loanPayment", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<TransactionHistory> transactionHistories = new ArrayList<>();
	
	@Column(name="created_on")
	 @CreationTimestamp
	 private LocalDateTime createdOn;
	
	public LoanPayment(Loan loan, float payableAmount, float loanAmount, TransactionStatus status) {
		super();
		this.loan = loan;
		this.payableAmount = payableAmount;
		this.loanAmount = loanAmount;
		this.status = status;
	}
}
